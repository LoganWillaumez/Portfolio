/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import React, { useRef, useEffect, useState } from 'react';
import { useGLTF, useTexture } from '@react-three/drei';
import { useSpring, animated, config } from '@react-spring/three';
import { useFrame, TextureLoader } from '@react-three/fiber';

export default function Model({ ...props }) {
  const [colorVsCode, colorBlender] = useTexture([
    '/mesh/Cap/Textures/vscode-FlipY.png',
    '/mesh/Cap/Textures/blender-FlipY.png',
  ]);
  const { scale } = useSpring({
    scale: props.active ? 1 : 0,
    config: {
      ...config.wobbly,
    },
    immediate: props.active ? false : true,
  });
  const { scale: scaleReverse } = useSpring({
    scale: !props.active ? 1 : 0,
    config: {
      ...config.wobbly,
      // duration: !props.active ? 450 : 0,
    },
    immediate: !props.active ? false : true,
  });
  const group = useRef();
  const mesh = useRef();
  // useFrame(() => (meshMat.current.material.opacity -= 0.01));
  // useEffect(() => {
  //   meshMat.current.material.opacity = props.active ? 1 : 0;
  //   meshMat.current.material.transparent = true;
  // }, [props.active]);
  const { nodes, materials } = useGLTF('/mesh/Cap/Cap.gltf');
  useEffect(() => {}, []);
  return (
    <group
      ref={group}
      {...props}
      dispose={null}
      position={[0, -0.5, 0]}
      rotation={[0.3, -0.5, 0]}
    >
      <animated.mesh
        ref={mesh}
        scale={scale}
        geometry={nodes.CapCaplowpolyFinal.geometry}
        material={materials.Blender}
        material-map={!props.active ? colorVsCode : colorBlender}
      />
      <animated.mesh
        ref={mesh}
        scale={scaleReverse}
        geometry={nodes.CapCaplowpolyFinal.geometry}
        material={materials.Blender}
        material-map={props.active ? colorVsCode : colorBlender}
      />
    </group>
  );
}

useGLTF.preload('/mesh/Cap/Cap.gltf');
